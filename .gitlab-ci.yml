---
stages:
  - test
  - review
  - release
  - security

build:
  image: "mcr.microsoft.com/dotnet/sdk:7.0@sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f"
  stage: test
  before_script:
    - dotnet restore src/GitlabChamp
  script:
    - dotnet publish -c Release src/GitlabChamp -o build/
  artifacts: 
    paths:
      - build/
    expire_in: 2 days

docker build:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  only:
    - tags
  script:
    - >-
      /kaniko/executor \
        --context "${CI_PROJECT_DIR}/src/GitlabChamp" \
        --dockerfile "./Dockerfile" \
        --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" \
        --destination "${CI_REGISTRY_IMAGE}:latest" \
        --build-arg "VERSION=$(echo $CI_COMMIT_TAG | sed 's/v//g')"

container_scanning:
  stage: security
  variables:
    GIT_STRATEGY: fetch
    CS_DOCKERFILE_PATH: ${CI_PROJECT_DIR}/src/GitlabChamp/Dockerfile
    DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  needs: ["docker build"]
  rules:
    - if: $CI_COMMIT_TAG

test-with-coverage:
  image: "mcr.microsoft.com/dotnet/sdk:7.0@sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f"
  stage: test
  before_script:
    - dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
  script: 
    - >-
      dotnet test \
        -c Debug \
        --collect:"XPlat Code Coverage" \
        --test-adapter-path:. \
        --logger:"junit;LogFilePath=./junit/junit-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" \
        -p:CollectCoverage=true
    - ./tools/reportgenerator "-reports:${CI_PROJECT_DIR}/**/coverage.cobertura.xml" "-targetdir:Reports_Coverage" -reportTypes:TextSummary;
    - ./tools/reportgenerator "-reports:${CI_PROJECT_DIR}/**/coverage.cobertura.xml" "-targetdir:Reports_Coverage" -reportTypes:Html;
    - cat ./Reports_Coverage/Summary.txt
    - echo 'End Summary'
  coverage: /Line coverage[\s\S].+%/
  artifacts:
    paths:
      - ./**/*test-result.xml
      - ./**/*coverage.cobertura.xml
    reports:
      junit:
        - test/junit/junit-test-result.xml
      coverage_report:
        coverage_format: cobertura
        path: test/TestResults/*/coverage.cobertura.xml

variables:
  COMPOSE_FILE: "test/IntegrationTest/docker-compose.yaml"
  COMPOSE_UP_PARAMETERS: "--build --force-recreate --remove-orphans"
include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - remote: https://ref.ci/fsrvcorp/container/integration-test-driver/-/raw/main/templates/basic.yaml
    rules: 
      - if: $CI_PIPELINE_SOURCE != "merge_request_event"

semantic release:
  image: registry.fsrv.services/fsrvcorp/container/payipi:latest@sha256:7173af5a6a66bf07d2951e6ff559a74964fcad47511e9941b971c7b8eabeab43
  stage: release
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - get-next-version -f json
    - VERSION="$(get-next-version -f json | jq -r 'select(.hasNextVersion==true) | .version')"
    - echo $VERSION
    - test -z "$VERSION" || curl --silent --request POST --header "PRIVATE-TOKEN:${CI_BOT_TOKEN}" "https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=v${VERSION}&ref=${CI_DEFAULT_BRANCH}" | jq


